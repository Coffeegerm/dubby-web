// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Define the Character model
model Character {
    id        Int         @id @default(autoincrement())
    name      String
    race      String
    class     String
    level     Int
    abilities Ability[]
    inventory Inventory[]
    ownerId   String
    owner     User        @relation(fields: [ownerId], references: [id])
}

// Define the Ability model
model Ability {
    id          Int       @id @default(autoincrement())
    name        String
    description String
    characterId Int
    character   Character @relation(fields: [characterId], references: [id])
}

// Define the Inventory model
model Inventory {
    id          Int       @id @default(autoincrement())
    name        String
    description String
    weight      Float
    value       Int
    character   Character @relation(fields: [characterId], references: [id])
    characterId Int
}

// Define the Campaign model
model Campaign {
    id              Int    @id @default(autoincrement())
    dungeonMasterId String
    dungeonMaster   User   @relation("dungeonMaster", fields: [dungeonMasterId], references: [id])

    name        String
    description String

    quests     Quest[]
    encounters Encounter[]
    players    User[]      @relation("players")
}

// Define the Quest model
model Quest {
    id          Int         @id @default(autoincrement())
    name        String
    description String
    campaign    Campaign    @relation(fields: [campaignId], references: [id])
    campaignId  Int
    encounters  Encounter[]
}

// Define the Encounter model
model Encounter {
    id         Int       @id @default(autoincrement())
    name       String
    location   String
    difficulty Int
    monsters   Monster[]
    campaign   Campaign  @relation(fields: [campaignId], references: [id])
    campaignId Int
    questId    Int?
    quest      Quest?    @relation(fields: [questId], references: [id])
}

// Define the Monster model
model Monster {
    id          Int       @id @default(autoincrement())
    name        String
    type        String
    health      Int
    initiative  Int
    encounter   Encounter @relation(fields: [encounterId], references: [id])
    encounterId Int
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    characters  Character[]
    myCampaigns Campaign[]  @relation("dungeonMaster")
    campaigns   Campaign[]  @relation("players")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
